download.file(fileUrl,destfile = "./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
head(restData)
head(restData,n=3)
dir()
fileUrl
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
head(restData)
summary(restData)
str(restData)
quantile(restData)
quantile(restData$councilDistrict)
quantile(restData$councilDistrict,probs=C(0.5,0.75,0.9))
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9))
table(restData$zipCode)
table(restData$zipCode,useNA="ifany")
table(restData$zipCode,useNA="ifany")
table(restData$councilDistrict,restData$zipCode)
head(restData)
restData$zipCode %in% c("21212")
table(restData$zipCode %in% c("21212"))
data("UCBAdmissions")
DF <- data.frame(UCBAdmissions)
head(DF)
summary(DF)
str(DF)
DF
xtabs(Freq ~ Gender + Admit, data=DF)
warpbreaks$replicate <- rep(1:9,len=54)
head(warpbreaks)
srt(warpbreaks)
str(warpbreaks)
warpbreaks
s1 <- seq(1,10,by=2)
s
s1
s2 <- seq(1,10,length=3)
s2
x <- c(1,3,8,25,100)
seq(along=x)
restData$nearme <- restData$neighborhood %in% c("Roland Park","Homeland")
table(restData$nearme)
restData$zipWrong = ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong)
table(restData$zipWrong,restData$zipCode<0)
restData$zipGroups = cut(restData$zipCode,breaks=quantile(restData$zipCode))
table restData$zipGroups
table(restData$zipGroups)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
library(reshape2)
head(mtcars)
library(dplyr)
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("chicago.rds")
head(restData)
head(mtcars)
dim(mtcars)
str(mtcars)
names(mtcars)
head(select(mtcars, mpg:cyl))
head(select(mtcars, mpg:am))
filter(mtcars,disp>108)
arrange(mtcars,mpg)
arrange(mtcars,disp)
arrange(mtcars,desc(disp))
names(mtcars)
rename(mtcars, qs = qsec)
names(mtcars)
mtcars <- rename(mtcars, qs = qsec)
names(mtcars)
mtcars <- mutate(mtcars, additional = cyl - disp)
mtcars
names(mtcars)
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dyplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, X:size)
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(X:size)
<
sdERQ2^
)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1",country=="US")
?Comparison
filter(cran, r_version<="3.0.2",users=="IN")
filter(cran, r_version<="3.0.2",country=="IN")
filter(cran, country == "US" | country == "IN")
library("swirl")
swirl()
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 AND r_os == "linux-gnu")
filter(cran, size > 100500 && r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dlpyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, -grade)
gather(students, male, female, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sec_class, into=c("sex","class"))
separate(data=res, col=sex_class, into=c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile = "test.csv")
data <- read.csv("test.csv")
head(data)
data$ACR > 10
head(data)
agriculturLogical <- select(data, ACR > 10 & FINCP>10000, na.rm=TRUE)
?select
?filter
library(dplyr)
?filter
agriculturLogical <- filter(data, ACR > 10 & FINCP>10000)
which(agriculturLogical)
agriculturLogical <- select(data, ACR > 10 & FINCP>10000)
agriculturLogical <- data[ACR > 10 & FINCP>10000]
agriculturLogical <- data[data$ACR > 10 & data$FINCP>10000]
agriculturLogical <- data[,data$ACR > 10 & data$FINCP>10000]
agriculturLogical <- data[data$ACR > 10 & data$FINCP>10000,]
which(agriculturLogical)
agriculturLogical <- data$ACR > 10 & data$FINCP>10000
which(agriculturLogical)
agriculturLogical <- (data$ACR > 10 && data$FINCP>10000)
which(agriculturLogical)
agriculturLogical <- (data$ACR > 10 AND data$FINCP>10000)
agriculturLogical <- (data$ACR > 10 AND data$AGS == 6)
agriculturLogical <- (data$ACR > 10 & data$AGS == 6)
which(agriculturLogical)
agriculturLogical <- (data$ACR == 3 & data$AGS == 6)
which(agriculturLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
myurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(myurl)
download.file(myurl,z)
download.file(myurl,destfile = "test.jpg")
pic <- readJPEG("test.jpg")
quantile(pic,native=TRUE)
quantile(pic,probs = 0.7)
head(pic)
min(pic)
pic <- readJPEG("test.jpg",native = TRUE)
quantile(pic,probs = 0.7)
quantile(pic,probs = 0.3)
quantile(pic,probs = 0.8)
getwd()
gdpdata <- read.csv("getdata-data-GDP.csv")
head(gdpdata)
gdpdata <- read.csv("getdata-data-GDP.csv",skip = 4)
head(gdpdata)
countrydata <- read.csv("getdata-data-EDSTATS_Country.csv",header=TRUE)
head(countrydata)
names(gdpdata)
names(count.fields())
names(countrydata)
mergedData = merge(gdpdata,countrydata,by.x="X.1",by.y = "CountryCode",all=TRUE)
head(mergedData)
tail(mergedData)
tail(gdpdata)
head(gdpdata.X1)
head(gdpdata."X1")
head(gdpdata$X.1)
head(gdpdata$X.2)
gdpdata$X.1
gdpdata$X.2
head(gdpdata)
gdpdata$X
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode",all=TRUE)
head(mergedData)
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode")
head(mergedData)
tail(mergedData)
tail(gdpdata)
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode",all=TRUE)
tail(gdpdata)
tail(mergedData)
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode",all=TRUE)
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode")
tail(mergedData)
library(dplyr)
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode")
tail(mergedData)
gdpdata <- read.csv("getdata-data-GDP.csv")
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode")
tail(mergedData)
tail(gdpdata)
gdpdata$X
all(is.na(gdpdata))
gdpdata <- gdpdata[!is.na(gdpdata$X)]
gdpdatacleaned <- gdpdata[,!is.na(gdpdata$X)]
gdpdatacleaned <- gdpdata[!is.na(gdpdata$X),]
gdpdatacleaned$X
mergedData = merge(gdpdata,countrydata,by.x="X",by.y = "CountryCode")
tail(gdpdata)
tail(mergedData)
summary(mergedData)
str(mergedData)
tail(mergedData)
select(mergedData,X)
countries <- select(mergedData,X)
unique(countries)
count(unique(countries))
mergedData = merge(countrydata,ddpdata,by.y="X",by.x = "CountryCode")
mergedData = merge(countrydata,gdpdata,by.y="X",by.x = "CountryCode")
countries <- select(mergedData,X)
head(mergedData)
tail(mergedData)
names(countrydata)
head(countrydata)
gdpdata <- read.csv("getdata-data-GDP.csv",nrows = 194)
mergedData = merge(countrydata,gdpdata,by.y="X",by.x = "CountryCode")
tail(mergedData)
head(gdpdata)
sort(mergedData,mergedData$Gross.domestic.product.2012,decreasing = TRUE)
arrange?
?arrange
names(mergedData)
arrange(mergedData,desc("Gross.domestic.product.2012"))
arrange(mergedData,Gross.domestic.product.2012)
arrange(mergedData,Gross.desc(domestic.product.2012))
arrange(mergedData,desc(Gross.domestic.product.2012))
arrangeddata <- arrange(mergedData,desc(Gross.domestic.product.2012))
head(arrangeddata)
head(arrangeddata,13)
arrangeddata <- arrange(mergedData,desc(as.numeric(Gross.domestic.product.2012)))
head(arrangeddata,13)
class(mergedData$Gross.domestic.product.2012)
tail(mergedData$Gross.domestic.product.2012)
arrangeddata <- arrange(mergedData,desc(as.integer(Gross.domestic.product.2012)))
head(arrangeddata,13)
str(mergedData)
arrangeddata <- arrange(mergedData,desc(as.numeric(as.character(Gross.domestic.product.2012))))
head(arrangeddata,13)
str(mergedData)
tapply(mergedData$Gross.domestic.product.2012,mergedData$Income.Group,mean)
tapply(as.numeric(as.character(mergedData$Gross.domestic.product.2012)),mergedData$Income.Group,mean)
quantiledata <- ntile(mergedData$Gross.domestic.product.2012,5)
quantiledata
quantiledata <- split(mergedData,ntile(mergedData$Gross.domestic.product.2012,5))
quantiledata
str(quantiledata)
quantiledata <- split(mergedData,ntile(as.numeric(as.character(mergedData$Gross.domestic.product.2012)),5))
str(quantiledata)
select(mergedData,Gross.domestic.product.2012,Income.Group)
newdata <- select(mergedData,Gross.domestic.product.2012,Income.Group)
head(newdata)
newdata <- select(mergedData,Gross.domestic.product.2012,Income.Group,X)
newdata <- select(mergedData,Gross.domestic.product.2012,Income.Group,CountryCode)
head(newdata)
newdata <- select(mergedData,Gross.domestic.product.2012,Income.Group,CountryCode,qdata=quantiledata)
head(quantiledata)
quantiledata <- ntile(mergedData$Gross.domestic.product.2012,5)
newdata <- select(mergedData,Gross.domestic.product.2012,Income.Group,CountryCode,qdata=quantiledata)
head(newdata)
newdata <- select(mergedData,Gross.domestic.product.2012,Income.Group,CountryCode,quantiledata)
head(newdata)
quantiledata
quantiledata <- cut(mergedData$Gross.domestic.product.2012,breaks=quantile(as.numeric(as.character(mergedData$Gross.domestic.product.2012))),5)
quantiledata <- cut(as.numeric(as.character(mergedData$Gross.domestic.product.2012)),breaks=quantile(as.numeric(as.character(mergedData$Gross.domestic.product.2012))),5)
quantiledata <- cut(as.numeric(as.character(mergedData$Gross.domestic.product.2012)),breaks=quantile(as.numeric(as.character(mergedData$Gross.domestic.product.2012))))
head(quantiledata)
newdata <- select(mergedData,as.numeric(as.character(Gross.domestic.product.2012)),Income.Group,CountryCode,quantiledata)
newdata <- select(mergedData,as.numeric(as.character(Gross.domestic.product.2012)),Income.Group,CountryCode)
head(newdata)
cut(newdata,breaks(newdata$Gross.domestic.product.2012,5))
str(newdata)
cut(newdata$Gross.domestic.product.2012,breaks(newdata$Gross.domestic.product.2012,5))
newdata <- select(mergedData,as.numeric(as.character(Gross.domestic.product.2012)),Income.Group,CountryCode)
str(newdata)
cut(as.numeric(as.character(newdata$Gross.domestic.product.2012)),breaks(as.numeric(as.character(newdata$Gross.domestic.product.2012)),5))
cut(as.numeric(as.character(newdata$Gross.domestic.product.2012)),breaks=(as.numeric(as.character(newdata$Gross.domestic.product.2012)),5))
cut(as.numeric(as.character(newdata$Gross.domestic.product.2012)),breaks=quantile(as.numeric(as.character(newdata$Gross.domestic.product.2012)),5))
cut(as.numeric(as.character(newdata$Gross.domestic.product.2012)),breaks=quantile(as.numeric(as.character(newdata$Gross.domestic.product.2012))))
quantilegroups <- cut(as.numeric(as.character(newdata$Gross.domestic.product.2012)),breaks=quantile(as.numeric(as.character(newdata$Gross.domestic.product.2012))))
table(quantilegroups)
library(Hmisc)
quantilegroups <- cut2(as.numeric(as.character(newdata$Gross.domestic.product.2012)),5)
table(quantilegroups)
quantilegroups <- cut2(as.numeric(as.character(newdata$Gross.domestic.product.2012)),g=5)
table(quantilegroups)
newdata2 <- mutate(newdata,quantilegroups)
head(newdata2)
table(newdata2)
head(newdata2)
dataneeded <- select(newdata2,Income.Group,quantilegroups)
head(dataneeded)
table(dataneeded)
getwd
getwd()
ls
dir()
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/cameras.csv",method="curl")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
names(cameraData)
splitNames = strsplit(names(cameraData),"\\.")
splitNames[5]
splitNames[6]
mylist <- list(letters=c("A","b","c"), numbers=1:3, matrix=(1:25),ncol=5))
mylist <- list(letters=c("A","b","c"), numbers=1:3, matrix=(1:25,ncol=5))
mylist <- list(letters=c("A","b","c"), numbers=1:3, matrix(1:25,ncol=5))
splitNames[[6]][1]
firstElement < function(x){x[1]}
firstElement <- function(x){x[1]}
sapply(splitNames,firstElement)
head(cameraData$intersection)
cameraData$intersection
grep("Alameda",cameraData$intersection)
cameraData2 <- cameraData[!grepl("Alameda",cameraData$intersection),]
names(cameraData2)
date()
class(date())
class(Sys.Date())
format(Sys.Date(),"%a %b %d")
format(Sys.Date(),"%a %b %t")
format(Sys.Date(),"%a %b %a")
weekday(Sys.Date())
weekdays(Sys.Date())
attr(,"origin")
julian(Sys.Date())
?POSIXlt
?POSIXct
swirl()
load(swirl)
swirl
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd('192012')
ymd("1920'1'2")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment <- update(this_moment,hours=17,minutes=27)
this_moment
nyc <- now(tz="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours=17,minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?interval
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(quantmod)
dir()
setwd('./Getting_and_Cleaning_Data_Coursera/Getting_and_Cleaning_data/')
dir()
source(run_analysis_2.R)
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
run_analysis_2()
run_analysis_2
run_analysis_2
colnames(selected_data) <- c("subject", "activity", features_selected_names)
# Calculate the average of the selected columns for each subject/activity pair
# Calculate the average of the selected columns for each subject/activity pair
library(reshape2)
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis_2.R")
source("run_analysis.R")
codebook
codebook("run_analysis.R"
codebook("run_analysis.R")
library(memisc)
library(knitr)
help(codebook)
??codebook
str(selected_data_average)
